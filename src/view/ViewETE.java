/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.awt.AWTException;
import java.awt.Color;
import java.awt.Font;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import java.awt.Robot;
import java.awt.event.KeyEvent;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.StringTokenizer;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.LookAndFeel;
import javax.swing.UIManager;
import javax.swing.UIManager.LookAndFeelInfo;
import javax.swing.UnsupportedLookAndFeelException;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.parsers.DocumentBuilder;
import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;
import org.xml.sax.SAXException;
import util.PrintUtilities;

/**
 *
 * @author IPSEMG
 */
public class ViewETE extends javax.swing.JFrame {

    private javax.swing.JFileChooser jFileChooser = null; //  @jve:visual-info  decl-index=0 visual-constraint="582,36"
    int posInicial = 0;
    String palavra = null;
    String letra = null;
    boolean completar;
    boolean ler;
    boolean rolar;
    private boolean hasChanged = false;
    String nomeArq = "./src/arquivos/arquivo.txt"; //Nome do arquivo,
    public String pInformacoes = "";
    private Font font1;
    private Font font2;
    
    /**
     * Creates new form NewView
     */
    public ViewETE() {
        initComponents();
        setLocationRelativeTo(null);
        jtpFerramentas.setSelectedIndex(1);
        this.font1 = new Font("Tahoma", Font.BOLD,14);
        this.font2 = new Font("Tahoma", Font.BOLD,25);
        atalhos();
    }
     //Carregar configurações do usuário

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jtpFerramentas = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        jToolBar1 = new javax.swing.JToolBar();
        jbNovo = new javax.swing.JButton();
        jbAbrir = new javax.swing.JButton();
        jbSalvar = new javax.swing.JButton();
        jbImprimir = new javax.swing.JButton();
        jbSair = new javax.swing.JButton();
        jPanel6 = new javax.swing.JPanel();
        jToolBar2 = new javax.swing.JToolBar();
        jbNegrito = new javax.swing.JButton();
        jbItalico = new javax.swing.JButton();
        jbFonteMaior = new javax.swing.JButton();
        jbFonteMenor = new javax.swing.JButton();
        jSpinnerTamanhoLetra = new javax.swing.JSpinner();
        jLabel2 = new javax.swing.JLabel();
        jcbFonte = new javax.swing.JComboBox();
        jrbCorTexto = new javax.swing.JRadioButton();
        jrbCorFundo = new javax.swing.JRadioButton();
        jbPreto = new javax.swing.JButton();
        jbCinzaEscuro = new javax.swing.JButton();
        jbCinza = new javax.swing.JButton();
        jbRosa = new javax.swing.JButton();
        jbBranco = new javax.swing.JButton();
        jbAmarelo = new javax.swing.JButton();
        jbVerdeEscuro = new javax.swing.JButton();
        jbVermelho = new javax.swing.JButton();
        jbLaranjado = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        jToolBar3 = new javax.swing.JToolBar();
        jbCopiar = new javax.swing.JButton();
        jbColar = new javax.swing.JButton();
        jtfPesquisar = new javax.swing.JTextField();
        jbPesquisar = new javax.swing.JButton();
        jPanel4 = new javax.swing.JPanel();
        jToolBar5 = new javax.swing.JToolBar();
        jButton11 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextAreaTexto = new javax.swing.JTextArea();
        jtfBarraDeFerramentas = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("ETE - Editor de Texto Especial");
        addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                formMouseWheelMoved(evt);
            }
        });
        addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                formMouseClicked(evt);
            }
        });

        jToolBar1.setRollover(true);

        jbNovo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/document-new.png"))); // NOI18N
        jbNovo.setText("Novo");
        jbNovo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNovoActionPerformed(evt);
            }
        });
        jToolBar1.add(jbNovo);

        jbAbrir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/document-open.png"))); // NOI18N
        jbAbrir.setText("Abrir");
        jbAbrir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAbrirActionPerformed(evt);
            }
        });
        jToolBar1.add(jbAbrir);

        jbSalvar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/document-save.png"))); // NOI18N
        jbSalvar.setText("Salvar");
        jbSalvar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSalvarActionPerformed(evt);
            }
        });
        jToolBar1.add(jbSalvar);

        jbImprimir.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/document-print.png"))); // NOI18N
        jbImprimir.setText("Imprimir");
        jbImprimir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbImprimirActionPerformed(evt);
            }
        });
        jToolBar1.add(jbImprimir);

        jbSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/application-exit.png"))); // NOI18N
        jbSair.setText("Sair");
        jbSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbSairActionPerformed(evt);
            }
        });
        jToolBar1.add(jbSair);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar1, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jtpFerramentas.addTab("Arquivo", jPanel1);

        jPanel6.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jToolBar2.setRollover(true);

        jbNegrito.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/format-text-bold.png"))); // NOI18N
        jbNegrito.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbNegritoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbNegrito);

        jbItalico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/format-text-italic.png"))); // NOI18N
        jbItalico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbItalicoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbItalico);

        jbFonteMaior.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/format-font-size-more.png"))); // NOI18N
        jbFonteMaior.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFonteMaiorActionPerformed(evt);
            }
        });
        jToolBar2.add(jbFonteMaior);

        jbFonteMenor.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/format-font-size-less.png"))); // NOI18N
        jbFonteMenor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFonteMenorActionPerformed(evt);
            }
        });
        jToolBar2.add(jbFonteMenor);

        jSpinnerTamanhoLetra.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jSpinnerTamanhoLetra.setModel(new javax.swing.SpinnerNumberModel(7, 7, 40, 1));
        jSpinnerTamanhoLetra.setMaximumSize(new java.awt.Dimension(50, 31));
        jSpinnerTamanhoLetra.setMinimumSize(new java.awt.Dimension(50, 31));
        jSpinnerTamanhoLetra.setPreferredSize(new java.awt.Dimension(50, 31));
        jSpinnerTamanhoLetra.setValue(12);
        jSpinnerTamanhoLetra.addChangeListener(new javax.swing.event.ChangeListener() {
            public void stateChanged(javax.swing.event.ChangeEvent evt) {
                jSpinnerTamanhoLetraStateChanged(evt);
            }
        });
        jToolBar2.add(jSpinnerTamanhoLetra);

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel2.setText("Fonte:");
        jToolBar2.add(jLabel2);

        jcbFonte.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jcbFonte.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Arial", "Arial Black", "Calibri", "Forte", "Garamond", "Georgia", "Lucida Bright", "Lucida Calligraphy", "Monaco", "Tahoma", "Verdana" }));
        jcbFonte.setMaximumSize(new java.awt.Dimension(200, 31));
        jcbFonte.setMinimumSize(new java.awt.Dimension(120, 31));
        jcbFonte.setPreferredSize(new java.awt.Dimension(200, 31));
        jcbFonte.addPopupMenuListener(new javax.swing.event.PopupMenuListener() {
            public void popupMenuCanceled(javax.swing.event.PopupMenuEvent evt) {
            }
            public void popupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {
                jcbFontePopupMenuWillBecomeInvisible(evt);
            }
            public void popupMenuWillBecomeVisible(javax.swing.event.PopupMenuEvent evt) {
            }
        });
        jToolBar2.add(jcbFonte);

        buttonGroup1.add(jrbCorTexto);
        jrbCorTexto.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jrbCorTexto.setSelected(true);
        jrbCorTexto.setText("Texto");
        jrbCorTexto.setFocusable(false);
        jrbCorTexto.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrbCorTexto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jrbCorTexto);

        buttonGroup1.add(jrbCorFundo);
        jrbCorFundo.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jrbCorFundo.setText("Fundo");
        jrbCorFundo.setFocusable(false);
        jrbCorFundo.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        jrbCorFundo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jToolBar2.add(jrbCorFundo);

        jbPreto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/preto.png"))); // NOI18N
        jbPreto.setFocusable(false);
        jbPreto.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbPreto.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbPreto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPretoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbPreto);

        jbCinzaEscuro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/cinzaEscuro.png"))); // NOI18N
        jbCinzaEscuro.setFocusable(false);
        jbCinzaEscuro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbCinzaEscuro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbCinzaEscuro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCinzaEscuroActionPerformed(evt);
            }
        });
        jToolBar2.add(jbCinzaEscuro);

        jbCinza.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/cinzaClaro.png"))); // NOI18N
        jbCinza.setFocusable(false);
        jbCinza.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbCinza.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbCinza.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCinzaActionPerformed(evt);
            }
        });
        jToolBar2.add(jbCinza);

        jbRosa.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/rosa.png"))); // NOI18N
        jbRosa.setFocusable(false);
        jbRosa.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbRosa.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbRosa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbRosaActionPerformed(evt);
            }
        });
        jToolBar2.add(jbRosa);

        jbBranco.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/branco.png"))); // NOI18N
        jbBranco.setFocusable(false);
        jbBranco.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbBranco.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbBranco.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbBrancoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbBranco);

        jbAmarelo.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/amarelo.png"))); // NOI18N
        jbAmarelo.setFocusable(false);
        jbAmarelo.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbAmarelo.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbAmarelo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbAmareloActionPerformed(evt);
            }
        });
        jToolBar2.add(jbAmarelo);

        jbVerdeEscuro.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/verde.png"))); // NOI18N
        jbVerdeEscuro.setFocusable(false);
        jbVerdeEscuro.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbVerdeEscuro.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbVerdeEscuro.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVerdeEscuroActionPerformed(evt);
            }
        });
        jToolBar2.add(jbVerdeEscuro);

        jbVermelho.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/vermelho.png"))); // NOI18N
        jbVermelho.setFocusable(false);
        jbVermelho.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbVermelho.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbVermelho.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbVermelhoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbVermelho);

        jbLaranjado.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/img/laranjado.png"))); // NOI18N
        jbLaranjado.setFocusable(false);
        jbLaranjado.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        jbLaranjado.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        jbLaranjado.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbLaranjadoActionPerformed(evt);
            }
        });
        jToolBar2.add(jbLaranjado);

        jPanel6.add(jToolBar2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 40));

        jtpFerramentas.addTab("Fonte", jPanel6);

        jToolBar3.setRollover(true);

        jbCopiar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/edit-copy.png"))); // NOI18N
        jbCopiar.setText("Copiar");
        jbCopiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbCopiarActionPerformed(evt);
            }
        });
        jToolBar3.add(jbCopiar);

        jbColar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/edit-paste.png"))); // NOI18N
        jbColar.setText("Colar");
        jbColar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbColarActionPerformed(evt);
            }
        });
        jToolBar3.add(jbColar);

        jtfPesquisar.setMaximumSize(new java.awt.Dimension(300, 25));
        jtfPesquisar.setMinimumSize(new java.awt.Dimension(300, 25));
        jtfPesquisar.setPreferredSize(new java.awt.Dimension(300, 25));
        jtfPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jtfPesquisarActionPerformed(evt);
            }
        });
        jToolBar3.add(jtfPesquisar);

        jbPesquisar.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/document-preview-archive.png"))); // NOI18N
        jbPesquisar.setText("Pesquisar palavra");
        jbPesquisar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbPesquisarActionPerformed(evt);
            }
        });
        jToolBar3.add(jbPesquisar);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar3, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jtpFerramentas.addTab("Editar", jPanel2);

        jToolBar5.setRollover(true);

        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagens/botoes 22 x 22/svn_status.png"))); // NOI18N
        jButton11.setText("Ajuda");
        jButton11.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton11ActionPerformed(evt);
            }
        });
        jToolBar5.add(jButton11);

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar5, javax.swing.GroupLayout.DEFAULT_SIZE, 904, Short.MAX_VALUE)
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jToolBar5, javax.swing.GroupLayout.PREFERRED_SIZE, 40, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        jtpFerramentas.addTab("Ajuda", jPanel4);

        jPanel5.setBorder(javax.swing.BorderFactory.createTitledBorder(null, "Painel de Textos", javax.swing.border.TitledBorder.CENTER, javax.swing.border.TitledBorder.DEFAULT_POSITION));
        jPanel5.setToolTipText("");

        jTextAreaTexto.setColumns(20);
        jTextAreaTexto.setRows(5);
        jTextAreaTexto.addMouseWheelListener(new java.awt.event.MouseWheelListener() {
            public void mouseWheelMoved(java.awt.event.MouseWheelEvent evt) {
                jTextAreaTextoMouseWheelMoved(evt);
            }
        });
        jTextAreaTexto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTextAreaTextoMouseClicked(evt);
            }
        });
        jTextAreaTexto.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                jTextAreaTextoKeyReleased(evt);
            }
        });
        jScrollPane1.setViewportView(jTextAreaTexto);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 463, Short.MAX_VALUE)
                .addContainerGap())
        );

        jtfBarraDeFerramentas.setEditable(false);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jtpFerramentas)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addComponent(jtfBarraDeFerramentas))
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jtpFerramentas, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jtfBarraDeFerramentas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jSpinnerTamanhoLetraStateChanged(javax.swing.event.ChangeEvent evt) {//GEN-FIRST:event_jSpinnerTamanhoLetraStateChanged
        // Aumenta o tamanho da letra
        int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
        String fonte = (String) jcbFonte.getSelectedItem();
        Font font = new Font(fonte, Font.PLAIN, tamanho);
        jTextAreaTexto.setFont(font);
    }//GEN-LAST:event_jSpinnerTamanhoLetraStateChanged

    private void jcbFontePopupMenuWillBecomeInvisible(javax.swing.event.PopupMenuEvent evt) {//GEN-FIRST:event_jcbFontePopupMenuWillBecomeInvisible
        // Troca de fonte
        int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
        String fonte = (String) jcbFonte.getSelectedItem();
        Font font = new Font(fonte, Font.PLAIN, tamanho);
        jTextAreaTexto.setFont(font);
    }//GEN-LAST:event_jcbFontePopupMenuWillBecomeInvisible

    private void jbPretoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPretoActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.BLACK);
        } else {
            this.jTextAreaTexto.setBackground(Color.BLACK);
        }
    }//GEN-LAST:event_jbPretoActionPerformed

    private void jbCinzaEscuroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCinzaEscuroActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.DARK_GRAY);
        } else {
            jTextAreaTexto.setBackground(Color.DARK_GRAY);
        }
    }//GEN-LAST:event_jbCinzaEscuroActionPerformed

    private void jbCinzaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCinzaActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.GRAY);
        } else {
            jTextAreaTexto.setBackground(Color.GRAY);
        }
    }//GEN-LAST:event_jbCinzaActionPerformed

    private void jbBrancoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbBrancoActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.WHITE);
        } else {
            this.jTextAreaTexto.setBackground(Color.WHITE);
        }
    }//GEN-LAST:event_jbBrancoActionPerformed

    private void jbAmareloActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAmareloActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.YELLOW);
        } else {
            jTextAreaTexto.setBackground(Color.YELLOW);
        }
    }//GEN-LAST:event_jbAmareloActionPerformed

    private void jbVerdeEscuroActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVerdeEscuroActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.GREEN);
        } else {
            jTextAreaTexto.setBackground(Color.GREEN);
        }
    }//GEN-LAST:event_jbVerdeEscuroActionPerformed

    private void jbRosaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbRosaActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.PINK);
        } else {
            jTextAreaTexto.setBackground(Color.PINK);
        }
    }//GEN-LAST:event_jbRosaActionPerformed

    private void jbLaranjadoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbLaranjadoActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.ORANGE);
        } else {
            jTextAreaTexto.setBackground(Color.ORANGE);
        }
    }//GEN-LAST:event_jbLaranjadoActionPerformed

    private void jbVermelhoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbVermelhoActionPerformed
        // TODO add your handling code here:
        if (jrbCorTexto.isSelected()) {
            jTextAreaTexto.setForeground(Color.RED);
        } else {
            jTextAreaTexto.setBackground(Color.RED);
        }
    }//GEN-LAST:event_jbVermelhoActionPerformed

    private void jButton11ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton11ActionPerformed

        new ViewAjuda().setVisible(true);
        
    }//GEN-LAST:event_jButton11ActionPerformed

    private void jTextAreaTextoKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTextAreaTextoKeyReleased
        // TODO add your handling code here:
//        posicao = this.jTextAreaTexto.getCaretPosition();      
        //pegar a letra digitada
        keyReleased(evt);
        //pegar a letra digitada

        JTextArea textArea = new JTextArea();
        textArea.setText(this.jTextAreaTexto.getText());
        StringTokenizer stringTokenizer = new StringTokenizer(textArea.getText());
        while (stringTokenizer.hasMoreTokens()) {
            palavra = stringTokenizer.nextToken();
        }

    }//GEN-LAST:event_jTextAreaTextoKeyReleased

    private void jbNovoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNovoActionPerformed
        // criar novo documento
        setTitle("documento.ete -" + " Editor de Texto Especial ");
        jTextAreaTexto.setText("");
    }//GEN-LAST:event_jbNovoActionPerformed

    private void jbAbrirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbAbrirActionPerformed
        // carrega arquivo
        this.loadFile();
    }//GEN-LAST:event_jbAbrirActionPerformed

    private void jbSalvarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSalvarActionPerformed
        //salva arquivo
        this.saveFile();
    }//GEN-LAST:event_jbSalvarActionPerformed

    private void jbImprimirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbImprimirActionPerformed
        //imprimir documento
        PrintUtilities.printComponent(jTextAreaTexto);
    }//GEN-LAST:event_jbImprimirActionPerformed

    private void jbSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbSairActionPerformed
        // Sair do programa
        System.exit(0);
    }//GEN-LAST:event_jbSairActionPerformed

    private void jbNegritoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbNegritoActionPerformed
        // definir negrito
        if (this.jbNegrito.isSelected()) {
            int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
            String fonte = (String) jcbFonte.getSelectedItem();
            Font font = new Font(fonte, Font.BOLD, tamanho);
            jTextAreaTexto.setFont(font);
        } else {
            int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
            String fonte = (String) jcbFonte.getSelectedItem();
            Font font = new Font(fonte, Font.PLAIN, tamanho);
            jTextAreaTexto.setFont(font);
        }
    }//GEN-LAST:event_jbNegritoActionPerformed

    private void jbItalicoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbItalicoActionPerformed
        // definir italico
        if (this.jbItalico.isSelected()) {
            int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
            String fonte = (String) jcbFonte.getSelectedItem();
            Font font = new Font(fonte, Font.ITALIC, tamanho);
            jTextAreaTexto.setFont(font);
        } else {
            int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
            String fonte = (String) jcbFonte.getSelectedItem();
            Font font = new Font(fonte, Font.PLAIN, tamanho);
            jTextAreaTexto.setFont(font);
        }
    }//GEN-LAST:event_jbItalicoActionPerformed

    private void jbFonteMaiorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFonteMaiorActionPerformed
        // diminui o tamanho da letra
        int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
        tamanho = tamanho - 1;
        String fonte = (String) jcbFonte.getSelectedItem();
        Font font = new Font(fonte, Font.PLAIN, tamanho);
        jTextAreaTexto.setFont(font);
        this.jSpinnerTamanhoLetra.setValue(tamanho);
    }//GEN-LAST:event_jbFonteMaiorActionPerformed

    private void jbFonteMenorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFonteMenorActionPerformed
        // Aumenta o tamanho da letra
        int tamanho = (int) this.jSpinnerTamanhoLetra.getValue();
        tamanho = tamanho + 1;
        String fonte = (String) jcbFonte.getSelectedItem();
        Font font = new Font(fonte, Font.PLAIN, tamanho);
        jTextAreaTexto.setFont(font);
        this.jSpinnerTamanhoLetra.setValue(tamanho);
    }//GEN-LAST:event_jbFonteMenorActionPerformed

    private void jbPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbPesquisarActionPerformed
        //pesquisar palavras
        String pesquisa = jtfPesquisar.getText();
        int res = jTextAreaTexto.getText().indexOf(pesquisa, posInicial);

        if (res < 0) {
            JOptionPane.showMessageDialog(null, "Texto não encontrado");
            posInicial = 0;
        } else {
            jTextAreaTexto.requestFocus();
            jTextAreaTexto.select(res, res + pesquisa.length());
            posInicial = res + pesquisa.length();
        }
    }//GEN-LAST:event_jbPesquisarActionPerformed

    private void jtfPesquisarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jtfPesquisarActionPerformed
        //pesquisar palavras
        pesquisarpalavras(jtfPesquisar);
    }//GEN-LAST:event_jtfPesquisarActionPerformed

    private void jTextAreaTextoMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_jTextAreaTextoMouseWheelMoved
        //ativa o rolar das letras
    }//GEN-LAST:event_jTextAreaTextoMouseWheelMoved

    private void formMouseWheelMoved(java.awt.event.MouseWheelEvent evt) {//GEN-FIRST:event_formMouseWheelMoved
        //ativa o rolar das letras
    }//GEN-LAST:event_formMouseWheelMoved

    private void jTextAreaTextoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTextAreaTextoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextAreaTextoMouseClicked

    private void formMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_formMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_formMouseClicked

    private void jbColarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbColarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbColarActionPerformed

    private void jbCopiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbCopiarActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jbCopiarActionPerformed
   
    
    public void atalhos() {  
        jbNovo.setMnemonic(KeyEvent.VK_N);  
        jbAbrir.setMnemonic(KeyEvent.VK_A);
        jbSalvar.setMnemonic(KeyEvent.VK_S);  
//        btExcluir.setMnemonic(KeyEvent.);  
//        btSalvar.setMnemonic(KeyEvent.VK_S);  
//        btSair.setMnemonic(KeyEvent.VK_R);  
      
    }  
    
 
       /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                                //começa o look aqui
                LookAndFeel lf = UIManager.getLookAndFeel();

                try {

                    for (LookAndFeelInfo info : UIManager.getInstalledLookAndFeels()) {
                        if ("Nimbus".equals(info.getName())) {
                            UIManager.setLookAndFeel(info.getClassName());
                            break;
                        }
                    }

                } catch (UnsupportedLookAndFeelException exc) {
                } catch (ClassNotFoundException exc) {
                } catch (InstantiationException exc) {
                } catch (IllegalAccessException exc) {
                }

                UIManager.put("nimbusBase", new Color(80, 100, 242));

                UIManager.put("nimbusBlueGrey", new Color(190, 189, 170));

                UIManager.put("control", new Color(242, 242, 242));
                //temina o look aqui
                new ViewETE().setVisible(true);
                

            }
        });
    }
       
    
    /**
     * Setar posição do mouse
     * @param x
     * @param y 
     */
    public void moveMouse(int x, int y) {
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gs = ge.getScreenDevices();
        // Search the devices for the one that draws the specified point.
        for (GraphicsDevice device : gs) {
            try {
                Robot r = new Robot(device);
                r.mouseMove(x, y);
            } catch (AWTException e) {
                e.printStackTrace();
            }

            return;
        }
        return;
    }
   

    /**
     * Pesquisa de uma palavra no texto
     */
    public void pesquisarpalavras(JTextField JText) {
        //pesquisar palavras
        String pesquisa = JText.getText();
        int res = jTextAreaTexto.getText().indexOf(pesquisa, posInicial);

        if (res < 0) {
            JOptionPane.showMessageDialog(null, "Texto não encontrado");
            posInicial = 0;
        } else {
            jTextAreaTexto.requestFocus();
            jTextAreaTexto.select(res, res + pesquisa.length());
            posInicial = res + pesquisa.length();
        }
    }

    /**
     * Seleciona a ultima palavra digitada
     *
     * @param pPalavra
     */
    public void selecionaPalavra(String pPalavra) {
        int res = jTextAreaTexto.getText().indexOf(pPalavra, posInicial);

        if (res < 0) {
            JOptionPane.showMessageDialog(null, "Texto não encontrado");
            posInicial = 0;
        } else {
            jTextAreaTexto.requestFocus();
            jTextAreaTexto.select(res, res + pPalavra.length());
            posInicial = res + pPalavra.length();
        }
    }

    /**
     * This method initializes jFileChooser
     *
     * @return javax.swing.JFileChooser
     */
    private javax.swing.JFileChooser getJFileChooser() {
        if (jFileChooser == null) {
            jFileChooser = new javax.swing.JFileChooser();
            jFileChooser.setMultiSelectionEnabled(false);
        }
        return jFileChooser;
    }

    /**
     * função que carrega o texto
     */
    private void loadFile() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.ete", "ete");
        fileChooser.setFileFilter(filtro);
        int state = fileChooser.showOpenDialog(this);
        //chama janela pra selecionar arquivo
        if (state == JFileChooser.APPROVE_OPTION) {
            //verifica o status
            File f = fileChooser.getSelectedFile();
            String NomeArq = fileChooser.getSelectedFile().getName();
            //pega o file selecionado na janela
            try {
                //Tenta ler o arquivo para o controle de texto
                FileReader fr = new FileReader(f);
                //cria o FileReader com o file previamente selecionado
                String temp = ""; //String temporaria
                //Vai lendo um caractere por vez e concatenando em temp.
                //A função read retorna um inteiro pois pode vir -1 significando o fim do arquivo
                //E um char não permite negativos
                //a função read pode gerar IOException
                int i = fr.read();
                while (i != -1) {
                    temp += ((char) i);
                    i = fr.read();
                }
                //fecha arquivo
                fr.close();
                jTextAreaTexto.setText(temp); //atribui temp ao controle
                //seta o titulo pra remover o * se houver
                setTitle(NomeArq + " - Editor de Texto Especial");
                hasChanged = false; //Não alterado
                
            } catch (FileNotFoundException e) { 
                //Não encontrou arquivo
                e.printStackTrace();
            } catch (IOException e) { 
                //Algum erro na leitura
                System.out.println("Erro ao abrir um documento");
                e.printStackTrace();
            }
        }else{
            //cancelou
        }
    }

    //função que salva
    private void saveFile() {
        JFileChooser fileChooser = new JFileChooser();
        FileNameExtensionFilter filtro = new FileNameExtensionFilter("*.ete", "ete");
        fileChooser.setFileFilter(filtro);

        int state = fileChooser.showSaveDialog(this);
        //Abre dialogo pra selecionar
        if (state == JFileChooser.APPROVE_OPTION) {
            //se selecionou
//            File f = fileChooser.getSelectedFile(); 
            //pega file
            try {
                // pego o path + o nome do arquivo  
                // digitado no campo "salvar" do JFileChooser 
                String NomeArq = fileChooser.getSelectedFile().getAbsolutePath();
                String NomeTitulo = fileChooser.getSelectedFile().getName();
                // digitado no campo "salvar" do JFileChooser  
                if (!NomeArq.endsWith(".ete")) {
                    NomeArq += ".ete";
                }

                //tenta salvar      
                FileWriter fw = new FileWriter(NomeArq);
                //pega o texto do TextArea e envia pra stream no arquivo
                //A função write escreve uma string para o arquivo. Existem outras opções
                //a função write pode gerar IOException
                fw.write(jTextAreaTexto.getText());
                //fecha arquivo
                fw.close();
                //seta o titulo pra remover o * se houver
                setTitle(NomeTitulo + ".ete - Editor de Texto Especial");
                hasChanged = false;
                //marca como não alterado
                
            } catch (FileNotFoundException e) {
                //Não encontrou o arquivo
            } catch (IOException e) {
                //Algum outro erro de io, não conseguiu gravar pois não tem permissão por exemplo
                e.printStackTrace();
            }
        }
    }

    //Na saida verifica se quer salvar
    private void sair() {
        if (hasChanged) {
            int state = JOptionPane.showConfirmDialog(this,
                    "O Arquivo foi moficado. Quer salva antes de sair?");
            if (state == JOptionPane.YES_OPTION) {
                saveFile();
            } else if (state == JOptionPane.CANCEL_OPTION) {
                return;
            }
        }
        System.exit(0); //Sae fora =)
    }

    //PEGA LETRAS DIGITADAS       
    public void keyPressed(java.awt.event.KeyEvent e) {
        if (e.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            System.out.println("Aperteei enter");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_A) {
            System.out.println("Aperteei A");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_B) {
            System.out.println("Aperteei B");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_C) {
            System.out.println("Aperteei C");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_D) {
            System.out.println("Aperteei D");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_E) {
            System.out.println("Aperteei E");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_F) {
            System.out.println("Aperteei F");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_G) {
            System.out.println("Aperteei G");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_H) {
            System.out.println("Aperteei H");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_I) {
            System.out.println("Aperteei I");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_J) {
            System.out.println("Aperteei J");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_K) {
            System.out.println("Aperteei K");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_L) {
            System.out.println("Aperteei L");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_M) {
            System.out.println("Aperteei M");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_N) {
            System.out.println("Aperteei N");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_O) {
            System.out.println("Aperteei O");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_P) {
            System.out.println("Aperteei P");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_Q) {
            System.out.println("Aperteei Q");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_R) {
            System.out.println("Aperteei R");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_S) {
            System.out.println("Aperteei S");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_T) {
            System.out.println("Aperteei T");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_U) {
            System.out.println("Aperteei U");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_V) {
            System.out.println("Aperteei V");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_X) {
            System.out.println("Aperteei X");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_Z) {
            System.out.println("Aperteei Z");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_W) {
            System.out.println("Aperteei W");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_Y) {
            System.out.println("Aperteei Y");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_0) {
            System.out.println("Aperteei 0");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_1) {
            System.out.println("Aperteei 1");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_2) {
            System.out.println("Aperteei 2");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_3) {
            System.out.println("Aperteei 3");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_4) {
            System.out.println("Aperteei 4");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_5) {
            System.out.println("Aperteei 5");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_6) {
            System.out.println("Aperteei 6");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_7) {
            System.out.println("Aperteei 7");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_8) {
            System.out.println("Aperteei 8");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_9) {
            System.out.println("Aperteei 9");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_DEAD_ACUTE) {
            System.out.println("Aperteei ´");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_DEAD_TILDE) {
            System.out.println("Aperteei ~");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            System.out.println("Aperteei DELETE");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE) {
            System.out.println("Aperteei APAGAR");
        } else if (e.getKeyCode() == java.awt.event.KeyEvent.VK_SPACE) {
            System.out.println("Aperteei ESPAÇO");
        }

    }; 


    public void filtrarNatabela() {
        long init = System.currentTimeMillis();
        /* Coloque aqui seu codigo que demora */
        long end = System.currentTimeMillis();
        long diff = end - init;
        System.out.println("Demorou " + (diff / 1000) + " segundos");
    }

    private void display(KeyEvent e, String keyStatus) {
        //You should only rely on the key char if the event
        //is a key typed event.
        int id = e.getID();
        String keyString;
        if (id == KeyEvent.KEY_TYPED) {
            char c = e.getKeyChar();
            keyString = "key character = '" + c + "'";
        } else {
            int keyCode = e.getKeyCode();
            keyString = "key code = " + keyCode + " (" + KeyEvent.getKeyText(keyCode) + ")";
        }//end of if
        System.out.println(keyString);
    }

    /**
     * Pega a letra digitada para buscR O CAMINHO DO AUDIO
     *
     * @param ke
     */
    public void keyReleased(KeyEvent ke) {
        String pLetra = null;
        pLetra = ke.getKeyChar() + "";
        letra = pLetra;

//        if(letra == "￿￿￿"){

        if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_ENTER) {
            letra = "enter";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_CONTROL) {
            letra = "ctrl";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_SHIFT) {
            letra = "shifit";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_ALT) {
            letra = "alt";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_BACK_SPACE) {
            letra = "backspace";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_CAPS_LOCK) {
            letra = "capslook";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_TAB) {
            letra = "tab";
        } else if (ke.getKeyCode() == java.awt.event.KeyEvent.VK_DELETE) {
            letra = "delete";
        }
//      }

//        System.out.println(letra+"Aqui");
    }

    public void eventoDeBotaoDasLetras(String botaoLetra, String pNomeSom) {
//      TODO add your handling code here:
//      int quantLetra;
        int posicaoCursor;
        //pega a posição do cursor
        posicaoCursor = this.jTextAreaTexto.getCaretPosition();
        //pega a frase
        String frase = this.jTextAreaTexto.getText();

        //PEGAR PALAVRA INICIO
        JTextArea textArea = new JTextArea();
        textArea.setText(this.jTextAreaTexto.getText());
        StringTokenizer stringTokenizer = new StringTokenizer(textArea.getText());
        while (stringTokenizer.hasMoreTokens()) {
            palavra = stringTokenizer.nextToken();
        }
        //PEGAR PALAVRA FIM

        StringBuilder s = new StringBuilder(frase);

        //insere o caracter da posição do mouse
        this.jTextAreaTexto.setText(s.insert(posicaoCursor, botaoLetra) + "");

        //alimenta barra de ferramentas
        this.barraDeEstatos();
    }

    //alimenta barra de estatos do software
    public void barraDeEstatos() {
        int tamanhoLetras;
        int linhas;
        
        tamanhoLetras = this.jTextAreaTexto.getText().length();
        linhas = this.jTextAreaTexto.getLineCount();
                
        this.jtfBarraDeFerramentas.setText("Total de caracteres: " + tamanhoLetras
                + " Total de linhas: "+linhas);
    }
    
    /**
     * Buscar configurações salvas no arquivo xml
     *
     * @param arquivoXML
     * @throws ParserConfigurationException
     * @throws SAXException
     * @throws IOException
     */
    public void realizaLeituraXML(String arquivoXML) throws ParserConfigurationException, SAXException, IOException {
        //fazer o parse do arquivo e criar o documento XML
        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();
        DocumentBuilder db = dbf.newDocumentBuilder();
        org.w3c.dom.Document doc = db.parse(arquivoXML);

        //Passo 1: obter o elemento raiz
        org.w3c.dom.Element raiz = doc.getDocumentElement();
//			System.out.println("O elemento raiz: " + raiz.getNodeName());

        //Passo 2: localizar os elementos filhos da configuracoes
        NodeList listaContatos = raiz.getElementsByTagName("config");

        //Passo 3: obter os elementos de cada elemento contato
        for (int i = 0; i < listaContatos.getLength(); i++) {
            //como cada elemento do NodeList � um n�, precisamos fazer o cast
            org.w3c.dom.Element contato = (org.w3c.dom.Element) listaContatos.item(i);

            //Passo 4: obter o atributo id do contato
//	    Attr id = contato.getAttributeNode("id");
//	    System.out.println("Contato id: " + id.getNodeValue());

            //Passo 5: obt�m o nome do contato
            NodeList listaCompletar = contato.getElementsByTagName("autoCompletar");
            Node autoCompletar = listaCompletar.item(0).getFirstChild();
            //setar opção dobotão
            completar = Boolean.parseBoolean(autoCompletar.getNodeValue());
            //Passo 6: obt�m o endere�o do contato
            NodeList listaRolar = contato.getElementsByTagName("rolarDigitar");
            Node rolarDigitar = listaRolar.item(0).getFirstChild();
            rolar = Boolean.parseBoolean(rolarDigitar.getNodeValue());
            //Passo 7: obt�m o telefone do contato
            NodeList listaLer = contato.getElementsByTagName("lerCaracter");
            Node lerCaracter = listaLer.item(0).getFirstChild();
            ler = Boolean.parseBoolean(lerCaracter.getNodeValue());
            //fonte
            NodeList listaTamanho = contato.getElementsByTagName("tamanho");
            Node pTamanho = listaTamanho.item(0).getFirstChild();
//            jSpinnerTamanhoLetra.setValue(Integer.parseInt(tamanho.getNodeValue()));

            NodeList listaFonte = contato.getElementsByTagName("fonte");
            Node pFonte = listaFonte.item(0).getFirstChild();
            //aplica estilo
            Font font = new Font(pFonte.getNodeValue(), Font.PLAIN, Integer.parseInt(pTamanho.getNodeValue()));
            jcbFonte.setSelectedItem(pFonte.getNodeValue());
            jTextAreaTexto.setFont(font);
            
        }
    } 
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JButton jButton11;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSpinner jSpinnerTamanhoLetra;
    private javax.swing.JTextArea jTextAreaTexto;
    private javax.swing.JToolBar jToolBar1;
    private javax.swing.JToolBar jToolBar2;
    private javax.swing.JToolBar jToolBar3;
    private javax.swing.JToolBar jToolBar5;
    private javax.swing.JButton jbAbrir;
    private javax.swing.JButton jbAmarelo;
    private javax.swing.JButton jbBranco;
    private javax.swing.JButton jbCinza;
    private javax.swing.JButton jbCinzaEscuro;
    private javax.swing.JButton jbColar;
    private javax.swing.JButton jbCopiar;
    private javax.swing.JButton jbFonteMaior;
    private javax.swing.JButton jbFonteMenor;
    private javax.swing.JButton jbImprimir;
    private javax.swing.JButton jbItalico;
    private javax.swing.JButton jbLaranjado;
    private javax.swing.JButton jbNegrito;
    private javax.swing.JButton jbNovo;
    private javax.swing.JButton jbPesquisar;
    private javax.swing.JButton jbPreto;
    private javax.swing.JButton jbRosa;
    private javax.swing.JButton jbSair;
    private javax.swing.JButton jbSalvar;
    private javax.swing.JButton jbVerdeEscuro;
    private javax.swing.JButton jbVermelho;
    private javax.swing.JComboBox jcbFonte;
    private javax.swing.JRadioButton jrbCorFundo;
    private javax.swing.JRadioButton jrbCorTexto;
    private javax.swing.JTextField jtfBarraDeFerramentas;
    private javax.swing.JTextField jtfPesquisar;
    private javax.swing.JTabbedPane jtpFerramentas;
    // End of variables declaration//GEN-END:variables

}
